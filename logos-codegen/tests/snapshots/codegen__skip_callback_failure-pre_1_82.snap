---
source: logos-codegen/tests/codegen.rs
expression: generated
---
generics:
  params:
    - lifetime:
        lifetime: s
        bounds: []
trait:
  - false
  - leading_colon: true
    segments:
      - ident: logos
      - ident: Logos
        arguments:
          angle_bracketed:
            args:
              - lifetime: s
self_ty:
  path:
    segments:
      - ident: Token
items:
  - type:
      ident: Error
      ty:
        tuple:
          elems: []
  - type:
      ident: Extras
      ty:
        tuple:
          elems: []
  - type:
      ident: Source
      ty:
        path:
          segments:
            - ident: str
  - fn:
      ident: lex
      inputs:
        - typed:
            pat:
              ident:
                ident: lex
            ty:
              reference:
                mut: true
                elem:
                  path:
                    leading_colon: true
                    segments:
                      - ident: logos
                      - ident: Lexer
                        arguments:
                          angle_bracketed:
                            args:
                              - lifetime: s
                              - type:
                                  path:
                                    segments:
                                      - ident: Self
      output: ~
      stmts:
        - item:
            fn:
              ident: _logos_derive_compile_errors
              inputs: []
              output: ~
              stmts:
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Expected #[logos(skip(\\\"regex literal\\\"[, [callback = ] callback, priority = priority]))]\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Expected a named argument at this position\\n\\nhint: If you are trying to define a callback here use: callback = ...\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Expected: priority = <integer>\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Expected an unsigned integer\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Resetting previously set priority\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Inline callbacks must use closure syntax with exactly one parameter\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Not a valid callback\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Callback has been already set\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Previous callback set here\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Expected: callback = ...\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Unknown nested attribute: unknown\\n\\nExpected: callback or priority\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Expected: #[logos(skip \\\"regex literal\\\")] or #[logos(skip(...))]\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"expected literal\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Expected #[logos(skip(\\\"regex literal\\\"[, [callback = ] callback, priority = priority]))]\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Expected a &str or &[u8] slice\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"Invalid nested attribute\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"A definition of variant `<skip>` can match the same input as another definition of variant `<skip>`.\\n\\nhint: Consider giving one definition a higher priority: #[regex(..., priority = 3)]\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"A definition of variant `<skip>` can match the same input as another definition of variant `<skip>`.\\n\\nhint: Consider giving one definition a higher priority: #[regex(..., priority = 3)]\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"A definition of variant `<skip>` can match the same input as another definition of variant `A`.\\n\\nhint: Consider giving one definition a higher priority: #[regex(..., priority = 3)]\""
                              - false
                    - false
                - expr:
                    - block:
                        stmts:
                          - expr:
                              - macro:
                                  path:
                                    segments:
                                      - ident: compile_error
                                  delimiter: paren
                                  tokens:
                                    - lit: "\"A definition of variant `A` can match the same input as another definition of variant `<skip>`.\\n\\nhint: Consider giving one definition a higher priority: #[skip(..., priority = 3)]\""
                              - false
                    - false
